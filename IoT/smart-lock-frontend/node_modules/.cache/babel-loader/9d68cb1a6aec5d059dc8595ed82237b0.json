{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useEffect } from 'react';\nimport { usePubNub } from 'pubnub-react';\nimport { CHANNEL } from '../index';\nexport const useHistory = () => {\n  _s();\n  const pubnub = usePubNub();\n  const [logs, setLogs] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchLogs = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await pubnub.history({\n        channel: CHANNEL,\n        count: 100,\n        stringifiedTimeToken: true\n      });\n      const formattedLogs = result.messages.map(item => {\n        var _item$entry, _item$message, _item$entry2, _item$message2, _item$entry3, _item$message3, _item$entry4, _item$message4;\n        return {\n          id: item.timetoken,\n          timestamp: new Date(parseInt(item.timetoken / 10000)).toISOString(),\n          type: ((_item$entry = item.entry) === null || _item$entry === void 0 ? void 0 : _item$entry.type) || ((_item$message = item.message) === null || _item$message === void 0 ? void 0 : _item$message.type),\n          success: ((_item$entry2 = item.entry) === null || _item$entry2 === void 0 ? void 0 : _item$entry2.success) || ((_item$message2 = item.message) === null || _item$message2 === void 0 ? void 0 : _item$message2.success),\n          message: ((_item$entry3 = item.entry) === null || _item$entry3 === void 0 ? void 0 : _item$entry3.message) || ((_item$message3 = item.message) === null || _item$message3 === void 0 ? void 0 : _item$message3.message),\n          userId: ((_item$entry4 = item.entry) === null || _item$entry4 === void 0 ? void 0 : _item$entry4.userId) || ((_item$message4 = item.message) === null || _item$message4 === void 0 ? void 0 : _item$message4.userId),\n          ...(item.entry || item.message)\n        };\n      });\n      setLogs(formattedLogs);\n    } catch (error) {\n      setError('Failed to fetch access logs: ' + error.message);\n      console.error('Failed to fetch access logs:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [pubnub]);\n  useEffect(() => {\n    const handleMessage = event => {\n      if (event.channel === CHANNEL && event.message.type === 'ACCESS_LOG') {\n        setLogs(prevLogs => [{\n          id: event.timetoken,\n          timestamp: new Date(parseInt(event.timetoken / 10000)).toISOString(),\n          ...event.message\n        }, ...prevLogs]);\n      }\n    };\n    pubnub.addListener({\n      message: handleMessage\n    });\n\n    // Initial fetch\n    fetchLogs();\n    return () => {\n      pubnub.removeListener({\n        message: handleMessage\n      });\n    };\n  }, [pubnub, fetchLogs]);\n  const clearLogs = useCallback(() => {\n    setLogs([]);\n  }, []);\n  return {\n    logs,\n    loading,\n    error,\n    fetchLogs,\n    clearLogs\n  };\n};\n_s(useHistory, \"qP5MQ24bWhPA+s78+fyWUXLCYDg=\", false, function () {\n  return [usePubNub];\n});\nexport default useHistory;","map":{"version":3,"names":["useState","useCallback","useEffect","usePubNub","CHANNEL","useHistory","_s","pubnub","logs","setLogs","loading","setLoading","error","setError","fetchLogs","result","history","channel","count","stringifiedTimeToken","formattedLogs","messages","map","item","_item$entry","_item$message","_item$entry2","_item$message2","_item$entry3","_item$message3","_item$entry4","_item$message4","id","timetoken","timestamp","Date","parseInt","toISOString","type","entry","message","success","userId","console","handleMessage","event","prevLogs","addListener","removeListener","clearLogs"],"sources":["/home/joel/code/Sep728/smart-lock-frontend/src/hooks/useHistory.js"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { usePubNub } from 'pubnub-react';\nimport { CHANNEL } from '../index';\n\nexport const useHistory = () => {\n    const pubnub = usePubNub();\n    const [logs, setLogs] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const fetchLogs = useCallback(async () => {\n        setLoading(true);\n        setError(null);\n        try {\n            const result = await pubnub.history({\n                channel: CHANNEL,\n                count: 100,\n                stringifiedTimeToken: true\n            });\n\n            const formattedLogs = result.messages.map(item => ({\n                id: item.timetoken,\n                timestamp: new Date(parseInt(item.timetoken / 10000)).toISOString(),\n                type: item.entry?.type || item.message?.type,\n                success: item.entry?.success || item.message?.success,\n                message: item.entry?.message || item.message?.message,\n                userId: item.entry?.userId || item.message?.userId,\n                ...(item.entry || item.message)\n            }));\n\n            setLogs(formattedLogs);\n        } catch (error) {\n            setError('Failed to fetch access logs: ' + error.message);\n            console.error('Failed to fetch access logs:', error);\n        } finally {\n            setLoading(false);\n        }\n    }, [pubnub]);\n\n    useEffect(() => {\n        const handleMessage = (event) => {\n            if (event.channel === CHANNEL && event.message.type === 'ACCESS_LOG') {\n                setLogs(prevLogs => [{\n                    id: event.timetoken,\n                    timestamp: new Date(parseInt(event.timetoken / 10000)).toISOString(),\n                    ...event.message\n                }, ...prevLogs]);\n            }\n        };\n\n        pubnub.addListener({\n            message: handleMessage\n        });\n\n        // Initial fetch\n        fetchLogs();\n\n        return () => {\n            pubnub.removeListener({ message: handleMessage });\n        };\n    }, [pubnub, fetchLogs]);\n\n    const clearLogs = useCallback(() => {\n        setLogs([]);\n    }, []);\n\n    return {\n        logs,\n        loading,\n        error,\n        fetchLogs,\n        clearLogs\n    };\n};\n\nexport default useHistory;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}