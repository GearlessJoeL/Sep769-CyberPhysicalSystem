{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useEffect } from 'react';\nimport { usePubNub } from 'pubnub-react';\nimport { getChannel } from '../utils/pubnub-config';\nexport const useHistory = () => {\n  _s();\n  const pubnub = usePubNub();\n  const channel = getChannel();\n  const [history, setHistory] = useState([]);\n  const [logs, setLogs] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchLogs = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await pubnub.history({\n        channel: channel,\n        count: 100,\n        stringifiedTimeToken: true\n      });\n      const formattedLogs = result.messages.map(item => {\n        const message = item.entry || item.message;\n        const activityStatus = message.state === 1 ? 'Access Granted' : 'Access Denied';\n        const activityName = message.name || 'Unknown';\n        const activityType = message.type || 'Unknown';\n        return {\n          id: item.timetoken,\n          timestamp: new Date(parseInt(item.timetoken / 10000)).toISOString(),\n          type: activityType,\n          success: message.state === 1,\n          message: `${activityType} - ${activityStatus}`,\n          name: activityName,\n          state: message.state\n        };\n      });\n      setLogs(formattedLogs);\n    } catch (error) {\n      setError('Failed to fetch access logs: ' + error.message);\n      console.error('Failed to fetch access logs:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [pubnub, channel]);\n  useEffect(() => {\n    const handleMessage = event => {\n      if (event.channel === channel && event.message.message_type === 'status') {\n        const message = event.message;\n        const activityStatus = message.state === 1 ? 'Access Granted' : 'Access Denied';\n        const activityName = message.name || 'Unknown';\n        const activityType = message.type || 'Unknown';\n        setLogs(prevLogs => [{\n          id: event.timetoken,\n          timestamp: new Date(parseInt(event.timetoken / 10000)).toISOString(),\n          type: activityType,\n          success: message.state === 1,\n          message: `${activityType} - ${activityStatus}`,\n          name: activityName,\n          state: message.state\n        }, ...prevLogs]);\n      }\n    };\n    pubnub.addListener({\n      message: handleMessage\n    });\n\n    // Initial fetch\n    fetchLogs();\n    return () => {\n      pubnub.removeListener({\n        message: handleMessage\n      });\n    };\n  }, [pubnub, fetchLogs, channel]);\n  const clearLogs = useCallback(() => {\n    setLogs([]);\n  }, []);\n  return {\n    logs,\n    loading,\n    error,\n    fetchLogs,\n    clearLogs\n  };\n};\n_s(useHistory, \"eBWtf+J3mW+H6Pdf9fV7bpZx/XU=\", false, function () {\n  return [usePubNub];\n});\nexport default useHistory;","map":{"version":3,"names":["useState","useCallback","useEffect","usePubNub","getChannel","useHistory","_s","pubnub","channel","history","setHistory","logs","setLogs","loading","setLoading","error","setError","fetchLogs","result","count","stringifiedTimeToken","formattedLogs","messages","map","item","message","entry","activityStatus","state","activityName","name","activityType","type","id","timetoken","timestamp","Date","parseInt","toISOString","success","console","handleMessage","event","message_type","prevLogs","addListener","removeListener","clearLogs"],"sources":["/home/joel/code/Sep728/smart-lock-frontend/src/hooks/useHistory.js"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { usePubNub } from 'pubnub-react';\nimport { getChannel } from '../utils/pubnub-config';\n\nexport const useHistory = () => {\n    const pubnub = usePubNub();\n    const channel = getChannel();\n    const [history, setHistory] = useState([]);\n    const [logs, setLogs] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const fetchLogs = useCallback(async () => {\n        setLoading(true);\n        setError(null);\n        try {\n            const result = await pubnub.history({\n                channel: channel,\n                count: 100,\n                stringifiedTimeToken: true\n            });\n\n            const formattedLogs = result.messages.map(item => {\n                const message = item.entry || item.message;\n                const activityStatus = message.state === 1 ? 'Access Granted' : 'Access Denied';\n                const activityName = message.name || 'Unknown';\n                const activityType = message.type || 'Unknown';\n\n                return {\n                    id: item.timetoken,\n                    timestamp: new Date(parseInt(item.timetoken / 10000)).toISOString(),\n                    type: activityType,\n                    success: message.state === 1,\n                    message: `${activityType} - ${activityStatus}`,\n                    name: activityName,\n                    state: message.state\n                };\n            });\n\n            setLogs(formattedLogs);\n        } catch (error) {\n            setError('Failed to fetch access logs: ' + error.message);\n            console.error('Failed to fetch access logs:', error);\n        } finally {\n            setLoading(false);\n        }\n    }, [pubnub, channel]);\n\n    useEffect(() => {\n        const handleMessage = (event) => {\n            if (event.channel === channel && event.message.message_type === 'status') {\n                const message = event.message;\n                const activityStatus = message.state === 1 ? 'Access Granted' : 'Access Denied';\n                const activityName = message.name || 'Unknown';\n                const activityType = message.type || 'Unknown';\n\n                setLogs(prevLogs => [{\n                    id: event.timetoken,\n                    timestamp: new Date(parseInt(event.timetoken / 10000)).toISOString(),\n                    type: activityType,\n                    success: message.state === 1,\n                    message: `${activityType} - ${activityStatus}`,\n                    name: activityName,\n                    state: message.state\n                }, ...prevLogs]);\n            }\n        };\n\n        pubnub.addListener({\n            message: handleMessage\n        });\n\n        // Initial fetch\n        fetchLogs();\n\n        return () => {\n            pubnub.removeListener({ message: handleMessage });\n        };\n    }, [pubnub, fetchLogs, channel]);\n\n    const clearLogs = useCallback(() => {\n        setLogs([]);\n    }, []);\n\n    return {\n        logs,\n        loading,\n        error,\n        fetchLogs,\n        clearLogs\n    };\n};\n\nexport default useHistory;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AACxD,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,UAAU,QAAQ,wBAAwB;AAEnD,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,MAAM,GAAGJ,SAAS,CAAC,CAAC;EAC1B,MAAMK,OAAO,GAAGJ,UAAU,CAAC,CAAC;EAC5B,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACW,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMiB,SAAS,GAAGhB,WAAW,CAAC,YAAY;IACtCa,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACA,MAAME,MAAM,GAAG,MAAMX,MAAM,CAACE,OAAO,CAAC;QAChCD,OAAO,EAAEA,OAAO;QAChBW,KAAK,EAAE,GAAG;QACVC,oBAAoB,EAAE;MAC1B,CAAC,CAAC;MAEF,MAAMC,aAAa,GAAGH,MAAM,CAACI,QAAQ,CAACC,GAAG,CAACC,IAAI,IAAI;QAC9C,MAAMC,OAAO,GAAGD,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACC,OAAO;QAC1C,MAAME,cAAc,GAAGF,OAAO,CAACG,KAAK,KAAK,CAAC,GAAG,gBAAgB,GAAG,eAAe;QAC/E,MAAMC,YAAY,GAAGJ,OAAO,CAACK,IAAI,IAAI,SAAS;QAC9C,MAAMC,YAAY,GAAGN,OAAO,CAACO,IAAI,IAAI,SAAS;QAE9C,OAAO;UACHC,EAAE,EAAET,IAAI,CAACU,SAAS;UAClBC,SAAS,EAAE,IAAIC,IAAI,CAACC,QAAQ,CAACb,IAAI,CAACU,SAAS,GAAG,KAAK,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;UACnEN,IAAI,EAAED,YAAY;UAClBQ,OAAO,EAAEd,OAAO,CAACG,KAAK,KAAK,CAAC;UAC5BH,OAAO,EAAE,GAAGM,YAAY,MAAMJ,cAAc,EAAE;UAC9CG,IAAI,EAAED,YAAY;UAClBD,KAAK,EAAEH,OAAO,CAACG;QACnB,CAAC;MACL,CAAC,CAAC;MAEFhB,OAAO,CAACS,aAAa,CAAC;IAC1B,CAAC,CAAC,OAAON,KAAK,EAAE;MACZC,QAAQ,CAAC,+BAA+B,GAAGD,KAAK,CAACU,OAAO,CAAC;MACzDe,OAAO,CAACzB,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACxD,CAAC,SAAS;MACND,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAE,CAACP,MAAM,EAAEC,OAAO,CAAC,CAAC;EAErBN,SAAS,CAAC,MAAM;IACZ,MAAMuC,aAAa,GAAIC,KAAK,IAAK;MAC7B,IAAIA,KAAK,CAAClC,OAAO,KAAKA,OAAO,IAAIkC,KAAK,CAACjB,OAAO,CAACkB,YAAY,KAAK,QAAQ,EAAE;QACtE,MAAMlB,OAAO,GAAGiB,KAAK,CAACjB,OAAO;QAC7B,MAAME,cAAc,GAAGF,OAAO,CAACG,KAAK,KAAK,CAAC,GAAG,gBAAgB,GAAG,eAAe;QAC/E,MAAMC,YAAY,GAAGJ,OAAO,CAACK,IAAI,IAAI,SAAS;QAC9C,MAAMC,YAAY,GAAGN,OAAO,CAACO,IAAI,IAAI,SAAS;QAE9CpB,OAAO,CAACgC,QAAQ,IAAI,CAAC;UACjBX,EAAE,EAAES,KAAK,CAACR,SAAS;UACnBC,SAAS,EAAE,IAAIC,IAAI,CAACC,QAAQ,CAACK,KAAK,CAACR,SAAS,GAAG,KAAK,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;UACpEN,IAAI,EAAED,YAAY;UAClBQ,OAAO,EAAEd,OAAO,CAACG,KAAK,KAAK,CAAC;UAC5BH,OAAO,EAAE,GAAGM,YAAY,MAAMJ,cAAc,EAAE;UAC9CG,IAAI,EAAED,YAAY;UAClBD,KAAK,EAAEH,OAAO,CAACG;QACnB,CAAC,EAAE,GAAGgB,QAAQ,CAAC,CAAC;MACpB;IACJ,CAAC;IAEDrC,MAAM,CAACsC,WAAW,CAAC;MACfpB,OAAO,EAAEgB;IACb,CAAC,CAAC;;IAEF;IACAxB,SAAS,CAAC,CAAC;IAEX,OAAO,MAAM;MACTV,MAAM,CAACuC,cAAc,CAAC;QAAErB,OAAO,EAAEgB;MAAc,CAAC,CAAC;IACrD,CAAC;EACL,CAAC,EAAE,CAAClC,MAAM,EAAEU,SAAS,EAAET,OAAO,CAAC,CAAC;EAEhC,MAAMuC,SAAS,GAAG9C,WAAW,CAAC,MAAM;IAChCW,OAAO,CAAC,EAAE,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACHD,IAAI;IACJE,OAAO;IACPE,KAAK;IACLE,SAAS;IACT8B;EACJ,CAAC;AACL,CAAC;AAACzC,EAAA,CAvFWD,UAAU;EAAA,QACJF,SAAS;AAAA;AAwF5B,eAAeE,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module"}