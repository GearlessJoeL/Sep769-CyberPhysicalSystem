{"ast":null,"code":"const USERS_STORAGE_KEY = 'smart_lock_users';\nexport const getUsers = () => {\n  const users = localStorage.getItem(USERS_STORAGE_KEY);\n  return users ? JSON.parse(users) : [];\n};\nexport const registerUser = (username, password) => {\n  const users = getUsers();\n\n  // Check if username already exists\n  if (users.some(user => user.username === username)) {\n    throw new Error('Username already exists');\n  }\n\n  // Add new user\n  users.push({\n    username,\n    password\n  });\n  localStorage.setItem(USERS_STORAGE_KEY, JSON.stringify(users));\n};\nexport const loginUser = (username, password) => {\n  const users = getUsers();\n  const user = users.find(u => u.username === username && u.password === password);\n  if (!user) {\n    throw new Error('Invalid username or password');\n  }\n\n  // Store current user in session\n  sessionStorage.setItem('currentUser', username);\n  return user;\n};\nexport const isAuthenticated = () => {\n  return sessionStorage.getItem('currentUser') !== null;\n};\nexport const logout = () => {\n  sessionStorage.removeItem('currentUser');\n};","map":{"version":3,"names":["USERS_STORAGE_KEY","getUsers","users","localStorage","getItem","JSON","parse","registerUser","username","password","some","user","Error","push","setItem","stringify","loginUser","find","u","sessionStorage","isAuthenticated","logout","removeItem"],"sources":["/home/joel/code/Sep728/smart-lock-frontend/src/utils/auth.js"],"sourcesContent":["const USERS_STORAGE_KEY = 'smart_lock_users';\n\nexport const getUsers = () => {\n  const users = localStorage.getItem(USERS_STORAGE_KEY);\n  return users ? JSON.parse(users) : [];\n};\n\nexport const registerUser = (username, password) => {\n  const users = getUsers();\n  \n  // Check if username already exists\n  if (users.some(user => user.username === username)) {\n    throw new Error('Username already exists');\n  }\n\n  // Add new user\n  users.push({ username, password });\n  localStorage.setItem(USERS_STORAGE_KEY, JSON.stringify(users));\n};\n\nexport const loginUser = (username, password) => {\n  const users = getUsers();\n  const user = users.find(u => u.username === username && u.password === password);\n  \n  if (!user) {\n    throw new Error('Invalid username or password');\n  }\n\n  // Store current user in session\n  sessionStorage.setItem('currentUser', username);\n  return user;\n};\n\nexport const isAuthenticated = () => {\n  return sessionStorage.getItem('currentUser') !== null;\n};\n\nexport const logout = () => {\n  sessionStorage.removeItem('currentUser');\n};"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,kBAAkB;AAE5C,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAC5B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAACJ,iBAAiB,CAAC;EACrD,OAAOE,KAAK,GAAGG,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,GAAG,EAAE;AACvC,CAAC;AAED,OAAO,MAAMK,YAAY,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EAClD,MAAMP,KAAK,GAAGD,QAAQ,CAAC,CAAC;;EAExB;EACA,IAAIC,KAAK,CAACQ,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACH,QAAQ,KAAKA,QAAQ,CAAC,EAAE;IAClD,MAAM,IAAII,KAAK,CAAC,yBAAyB,CAAC;EAC5C;;EAEA;EACAV,KAAK,CAACW,IAAI,CAAC;IAAEL,QAAQ;IAAEC;EAAS,CAAC,CAAC;EAClCN,YAAY,CAACW,OAAO,CAACd,iBAAiB,EAAEK,IAAI,CAACU,SAAS,CAACb,KAAK,CAAC,CAAC;AAChE,CAAC;AAED,OAAO,MAAMc,SAAS,GAAGA,CAACR,QAAQ,EAAEC,QAAQ,KAAK;EAC/C,MAAMP,KAAK,GAAGD,QAAQ,CAAC,CAAC;EACxB,MAAMU,IAAI,GAAGT,KAAK,CAACe,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACV,QAAQ,KAAKA,QAAQ,IAAIU,CAAC,CAACT,QAAQ,KAAKA,QAAQ,CAAC;EAEhF,IAAI,CAACE,IAAI,EAAE;IACT,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EACjD;;EAEA;EACAO,cAAc,CAACL,OAAO,CAAC,aAAa,EAAEN,QAAQ,CAAC;EAC/C,OAAOG,IAAI;AACb,CAAC;AAED,OAAO,MAAMS,eAAe,GAAGA,CAAA,KAAM;EACnC,OAAOD,cAAc,CAACf,OAAO,CAAC,aAAa,CAAC,KAAK,IAAI;AACvD,CAAC;AAED,OAAO,MAAMiB,MAAM,GAAGA,CAAA,KAAM;EAC1BF,cAAc,CAACG,UAAU,CAAC,aAAa,CAAC;AAC1C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}