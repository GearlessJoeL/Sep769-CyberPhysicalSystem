{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useEffect, useRef } from 'react';\nimport { usePubNub } from 'pubnub-react';\nimport { CHANNEL } from '../index';\nexport const useNFC = () => {\n  _s();\n  const pubnub = usePubNub();\n  const [nfcData, setNfcData] = useState(null);\n  const [isScanning, setIsScanning] = useState(false);\n  const [error, setError] = useState(null);\n  const cleanupRef = useRef(null);\n  const startScan = useCallback(async () => {\n    try {\n      setIsScanning(true);\n      setError(null);\n      await pubnub.publish({\n        channel: CHANNEL,\n        message: {\n          type: 'NFC',\n          command: 'START_SCAN',\n          timestamp: new Date().toISOString()\n        }\n      });\n    } catch (err) {\n      setError('Failed to start NFC scan: ' + err.message);\n      console.error('NFC scan error:', err);\n      setIsScanning(false);\n    }\n  }, [pubnub]);\n  const stopScan = useCallback(async () => {\n    try {\n      await pubnub.publish({\n        channel: CHANNEL,\n        message: {\n          type: 'NFC',\n          command: 'STOP_SCAN',\n          timestamp: new Date().toISOString()\n        }\n      });\n      setNfcData(null);\n      setIsScanning(false);\n    } catch (err) {\n      setError('Failed to stop NFC scan: ' + err.message);\n      console.error('NFC stop error:', err);\n    }\n  }, [pubnub]);\n  useEffect(() => {\n    const handleMessage = event => {\n      if (event.channel === CHANNEL && event.message.type === 'NFC') {\n        setNfcData({\n          success: event.message.success,\n          message: event.message.message,\n          tagId: event.message.tagId,\n          timestamp: new Date().toISOString()\n        });\n      }\n    };\n    pubnub.addListener({\n      message: handleMessage\n    });\n    cleanupRef.current = handleMessage;\n    return () => {\n      pubnub.removeListener({\n        message: cleanupRef.current\n      });\n    };\n  }, [pubnub]);\n\n  // Separate effect for handling scanning state cleanup\n  useEffect(() => {\n    return () => {\n      if (isScanning) {\n        stopScan();\n      }\n    };\n  }, [isScanning, stopScan]);\n  return {\n    nfcData,\n    isScanning,\n    error,\n    startScan,\n    stopScan\n  };\n};\n_s(useNFC, \"FxdPTgBBvcwYMRfQjWvhXqnloO0=\", false, function () {\n  return [usePubNub];\n});\nexport default useNFC;","map":{"version":3,"names":["useState","useCallback","useEffect","useRef","usePubNub","CHANNEL","useNFC","_s","pubnub","nfcData","setNfcData","isScanning","setIsScanning","error","setError","cleanupRef","startScan","publish","channel","message","type","command","timestamp","Date","toISOString","err","console","stopScan","handleMessage","event","success","tagId","addListener","current","removeListener"],"sources":["/home/joel/code/Sep728/smart-lock-frontend/src/hooks/useNFC.js"],"sourcesContent":["import { useState, useCallback, useEffect, useRef } from 'react';\nimport { usePubNub } from 'pubnub-react';\nimport { CHANNEL } from '../index';\n\nexport const useNFC = () => {\n  const pubnub = usePubNub();\n  const [nfcData, setNfcData] = useState(null);\n  const [isScanning, setIsScanning] = useState(false);\n  const [error, setError] = useState(null);\n  const cleanupRef = useRef(null);\n\n  const startScan = useCallback(async () => {\n    try {\n      setIsScanning(true);\n      setError(null);\n\n      await pubnub.publish({\n        channel: CHANNEL,\n        message: {\n          type: 'NFC',\n          command: 'START_SCAN',\n          timestamp: new Date().toISOString()\n        }\n      });\n    } catch (err) {\n      setError('Failed to start NFC scan: ' + err.message);\n      console.error('NFC scan error:', err);\n      setIsScanning(false);\n    }\n  }, [pubnub]);\n\n  const stopScan = useCallback(async () => {\n    try {\n      await pubnub.publish({\n        channel: CHANNEL,\n        message: {\n          type: 'NFC',\n          command: 'STOP_SCAN',\n          timestamp: new Date().toISOString()\n        }\n      });\n\n      setNfcData(null);\n      setIsScanning(false);\n    } catch (err) {\n      setError('Failed to stop NFC scan: ' + err.message);\n      console.error('NFC stop error:', err);\n    }\n  }, [pubnub]);\n\n  useEffect(() => {\n    const handleMessage = (event) => {\n      if (event.channel === CHANNEL && event.message.type === 'NFC') {\n        setNfcData({\n          success: event.message.success,\n          message: event.message.message,\n          tagId: event.message.tagId,\n          timestamp: new Date().toISOString()\n        });\n      }\n    };\n\n    pubnub.addListener({ message: handleMessage });\n    cleanupRef.current = handleMessage;\n\n    return () => {\n      pubnub.removeListener({ message: cleanupRef.current });\n    };\n  }, [pubnub]);\n\n  // Separate effect for handling scanning state cleanup\n  useEffect(() => {\n    return () => {\n      if (isScanning) {\n        stopScan();\n      }\n    };\n  }, [isScanning, stopScan]);\n\n  return {\n    nfcData,\n    isScanning,\n    error,\n    startScan,\n    stopScan\n  };\n};\n\nexport default useNFC;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}