{"ast":null,"code":"var _jsxFileName = \"/home/joel/code/Sep728/smart-lock-frontend/src/components/RecognitionResult.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecognitionResult = () => {\n  _s();\n  const [recognitionData, setRecognitionData] = useState({\n    success: false,\n    type: '',\n    name: '',\n    timestamp: ''\n  });\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchRecognitionData = async () => {\n      try {\n        setLoading(true);\n        // Replace with your actual API endpoint\n        const response = await fetch('http://localhost:5000/api/recognition');\n        const data = await response.json();\n        setRecognitionData(data);\n      } catch (error) {\n        console.error('Error fetching recognition data', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Fetch initially\n    fetchRecognitionData();\n\n    // Set up interval to poll for updates (every 2 seconds)\n    const intervalId = setInterval(fetchRecognitionData, 2000);\n\n    // Cleanup function to clear interval when component unmounts\n    return () => clearInterval(intervalId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"recognition-result\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recognition Result\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `result-card ${recognitionData.success ? 'success' : 'failure'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status\",\n        children: [\"Status: \", recognitionData.success ? 'Success' : 'Failed']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), recognitionData.type && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"type\",\n        children: [\"Method: \", recognitionData.type]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 36\n      }, this), recognitionData.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"name\",\n        children: [\"User: \", recognitionData.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 36\n      }, this), recognitionData.timestamp && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"time\",\n        children: [\"Time: \", new Date(recognitionData.timestamp).toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 41\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(RecognitionResult, \"P+cGvnoREeNFdEs8+INRD2hV3sM=\");\n_c = RecognitionResult;\nexport default RecognitionResult;\nvar _c;\n$RefreshReg$(_c, \"RecognitionResult\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","RecognitionResult","_s","recognitionData","setRecognitionData","success","type","name","timestamp","loading","setLoading","fetchRecognitionData","response","fetch","data","json","error","console","intervalId","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Date","toLocaleString","_c","$RefreshReg$"],"sources":["/home/joel/code/Sep728/smart-lock-frontend/src/components/RecognitionResult.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst RecognitionResult = () => {\n  const [recognitionData, setRecognitionData] = useState({\n    success: false,\n    type: '',\n    name: '',\n    timestamp: ''\n  });\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchRecognitionData = async () => {\n      try {\n        setLoading(true);\n        // Replace with your actual API endpoint\n        const response = await fetch('http://localhost:5000/api/recognition');\n        const data = await response.json();\n        setRecognitionData(data);\n      } catch (error) {\n        console.error('Error fetching recognition data', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Fetch initially\n    fetchRecognitionData();\n\n    // Set up interval to poll for updates (every 2 seconds)\n    const intervalId = setInterval(fetchRecognitionData, 2000);\n\n    // Cleanup function to clear interval when component unmounts\n    return () => clearInterval(intervalId);\n  }, []);\n\n  return (\n    <div className=\"recognition-result\">\n      <h2>Recognition Result</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <div className={`result-card ${recognitionData.success ? 'success' : 'failure'}`}>\n          <p className=\"status\">Status: {recognitionData.success ? 'Success' : 'Failed'}</p>\n          {recognitionData.type && <p className=\"type\">Method: {recognitionData.type}</p>}\n          {recognitionData.name && <p className=\"name\">User: {recognitionData.name}</p>}\n          {recognitionData.timestamp && <p className=\"time\">Time: {new Date(recognitionData.timestamp).toLocaleString()}</p>}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default RecognitionResult; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}