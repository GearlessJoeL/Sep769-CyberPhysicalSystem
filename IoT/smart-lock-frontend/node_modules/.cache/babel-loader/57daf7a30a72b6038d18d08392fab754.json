{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useEffect } from 'react';\nimport { usePubNub } from 'pubnub-react';\nimport { getChannel } from '../utils/pubnub-config';\nexport const useHistory = () => {\n  _s();\n  const pubnub = usePubNub();\n  const channel = getChannel();\n  const [history, setHistory] = useState([]);\n  const [logs, setLogs] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const getActivityName = message => {\n    if (message.state === 0) {\n      switch (message.type) {\n        case 'remote':\n          return 'Remote Access';\n        case 'rfid':\n          return 'RFID Card';\n        case 'face':\n          return 'Face Recognition';\n        case 'fingerprint':\n          return 'Fingerprint';\n        default:\n          return 'Unknown';\n      }\n    }\n    return message.name || 'Unknown';\n  };\n  const fetchLogs = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await pubnub.history({\n        channel: channel,\n        count: 100,\n        stringifiedTimeToken: true\n      });\n      const formattedLogs = result.messages.map(item => {\n        const message = item.entry || item.message;\n        const activityStatus = message.state === 1 ? 'Access Granted' : 'Access Denied';\n        const activityName = getActivityName(message);\n        const activityType = message.type || 'Unknown';\n        return {\n          id: item.timetoken,\n          timestamp: new Date(parseInt(item.timetoken / 10000)).toISOString(),\n          type: activityType,\n          success: message.state === 1,\n          message: `${activityType} - ${activityStatus}`,\n          name: activityName,\n          state: message.state\n        };\n      });\n      setLogs(formattedLogs);\n    } catch (error) {\n      setError('Failed to fetch access logs: ' + error.message);\n      console.error('Failed to fetch access logs:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [pubnub, channel]);\n  useEffect(() => {\n    const handleMessage = event => {\n      if (event.channel === channel && event.message.message_type === 'status') {\n        const message = event.message;\n        const activityStatus = message.state === 1 ? 'Access Granted' : 'Access Denied';\n        const activityName = getActivityName(message);\n        const activityType = message.type || 'Unknown';\n        setLogs(prevLogs => [{\n          id: event.timetoken,\n          timestamp: new Date(parseInt(event.timetoken / 10000)).toISOString(),\n          type: activityType,\n          success: message.state === 1,\n          message: `${activityType} - ${activityStatus}`,\n          name: activityName,\n          state: message.state\n        }, ...prevLogs]);\n      }\n    };\n    pubnub.addListener({\n      message: handleMessage\n    });\n\n    // Initial fetch\n    fetchLogs();\n    return () => {\n      pubnub.removeListener({\n        message: handleMessage\n      });\n    };\n  }, [pubnub, fetchLogs, channel]);\n  const clearLogs = useCallback(() => {\n    setLogs([]);\n  }, []);\n  return {\n    logs,\n    loading,\n    error,\n    fetchLogs,\n    clearLogs\n  };\n};\n_s(useHistory, \"eBWtf+J3mW+H6Pdf9fV7bpZx/XU=\", false, function () {\n  return [usePubNub];\n});\nexport default useHistory;","map":{"version":3,"names":["useState","useCallback","useEffect","usePubNub","getChannel","useHistory","_s","pubnub","channel","history","setHistory","logs","setLogs","loading","setLoading","error","setError","getActivityName","message","state","type","name","fetchLogs","result","count","stringifiedTimeToken","formattedLogs","messages","map","item","entry","activityStatus","activityName","activityType","id","timetoken","timestamp","Date","parseInt","toISOString","success","console","handleMessage","event","message_type","prevLogs","addListener","removeListener","clearLogs"],"sources":["/home/joel/code/Sep728/smart-lock-frontend/src/hooks/useHistory.js"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { usePubNub } from 'pubnub-react';\nimport { getChannel } from '../utils/pubnub-config';\n\nexport const useHistory = () => {\n    const pubnub = usePubNub();\n    const channel = getChannel();\n    const [history, setHistory] = useState([]);\n    const [logs, setLogs] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const getActivityName = (message) => {\n        if (message.state === 0) {\n            switch (message.type) {\n                case 'remote':\n                    return 'Remote Access';\n                case 'rfid':\n                    return 'RFID Card';\n                case 'face':\n                    return 'Face Recognition';\n                case 'fingerprint':\n                    return 'Fingerprint';\n                default:\n                    return 'Unknown';\n            }\n        }\n        return message.name || 'Unknown';\n    };\n\n    const fetchLogs = useCallback(async () => {\n        setLoading(true);\n        setError(null);\n        try {\n            const result = await pubnub.history({\n                channel: channel,\n                count: 100,\n                stringifiedTimeToken: true\n            });\n\n            const formattedLogs = result.messages.map(item => {\n                const message = item.entry || item.message;\n                const activityStatus = message.state === 1 ? 'Access Granted' : 'Access Denied';\n                const activityName = getActivityName(message);\n                const activityType = message.type || 'Unknown';\n\n                return {\n                    id: item.timetoken,\n                    timestamp: new Date(parseInt(item.timetoken / 10000)).toISOString(),\n                    type: activityType,\n                    success: message.state === 1,\n                    message: `${activityType} - ${activityStatus}`,\n                    name: activityName,\n                    state: message.state\n                };\n            });\n\n            setLogs(formattedLogs);\n        } catch (error) {\n            setError('Failed to fetch access logs: ' + error.message);\n            console.error('Failed to fetch access logs:', error);\n        } finally {\n            setLoading(false);\n        }\n    }, [pubnub, channel]);\n\n    useEffect(() => {\n        const handleMessage = (event) => {\n            if (event.channel === channel && event.message.message_type === 'status') {\n                const message = event.message;\n                const activityStatus = message.state === 1 ? 'Access Granted' : 'Access Denied';\n                const activityName = getActivityName(message);\n                const activityType = message.type || 'Unknown';\n\n                setLogs(prevLogs => [{\n                    id: event.timetoken,\n                    timestamp: new Date(parseInt(event.timetoken / 10000)).toISOString(),\n                    type: activityType,\n                    success: message.state === 1,\n                    message: `${activityType} - ${activityStatus}`,\n                    name: activityName,\n                    state: message.state\n                }, ...prevLogs]);\n            }\n        };\n\n        pubnub.addListener({\n            message: handleMessage\n        });\n\n        // Initial fetch\n        fetchLogs();\n\n        return () => {\n            pubnub.removeListener({ message: handleMessage });\n        };\n    }, [pubnub, fetchLogs, channel]);\n\n    const clearLogs = useCallback(() => {\n        setLogs([]);\n    }, []);\n\n    return {\n        logs,\n        loading,\n        error,\n        fetchLogs,\n        clearLogs\n    };\n};\n\nexport default useHistory;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}